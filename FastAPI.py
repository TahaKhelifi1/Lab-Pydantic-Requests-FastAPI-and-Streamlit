# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YitrLyQr6ik6an4PzoqHCSQPyutYjU4J

### Install and Get Started with FastAPI
"""

pip install fastapi uvicorn

"""Create a new **directory**"""

from fastapi import FastAPI

# Create an app
app = FastAPI()

# define a path for HTTP Get method
@app.get("/")
def root():
    return {"Hello": "World"}

"""Run the **server**"""

uvicorn main:app --reload

"""### GET and POST Routes"""

items = []

@app.post("items")
def create_item(item: str):
    items.append(item)
    return item

curl -X POST -H "Content-Type: application/json" 'http://127.0.0.1:8000/items?item=apple'

@app.get("items/{item_id}")
def get_item(item_id: int) -> str:
    item = items[item_id]
    return item

"""tEST END POINT"""

curl -X GET http://127.0.0.1:8000/items/0

"""We get this error: Internal Server Error"""

curl -X GET http://127.0.0.1:8000/items/7

"""### Handling HTTP Errors"""

from fastapi import FastAPI, HTTPException

@app.get("items/{item_id}")
def get_item(item_id: int) -> str:
    if item_id < len(items):
        return = items[item_id]
    else:
        raise HTTPException(status_code=404, detail=f"Item {item_id} not found")

curl -X GET http://127.0.0.1:8000/items/7

"""result"""

{"detail" : "Item 7 not found"}

"""### JSON Request and Path Parameters"""

@app.get("/items/")
def list_items(limit: int = 10):
    return items[0:limit]

curl -X GET 'http://127.0.0.1:8000/items?limit=3'

"""### Pydantic models

FastAPI supports Pydantic models which permit to structure data and also provide additional validation. This will make things like testing, documentation and code completion in your IDE easier.
"""

from pydantic import BaseModel

class Item(BaseModel):
    text: str = None
    is_done: bool = False

...
def create_item(item: Item):
...
def get_item(item_id: int) -> Item:

"""instead of using this command"""

curl -X POST -H "Content-Type: application/json" 'http://127.0.0.1:8000/items?item=apple'

"""we can use this command"""

curl -X POST -H "Content-Type: application/json" -d '{"text":"apple"}' 'http://127.0.0.1:8000/items'

"""The result will be"""

[{"text":"apple","is_done":false}]

class Item(BaseModel):
    # without default value
    text: str
    is_done: bool = False



curl -X POST -H "Content-Type: application/json" -d '{"title":"apple"}' 'http://127.0.0.1:8000/items'

"""### Response Models

So far, we’ve looked at how to model the request data and the input payload to FastAPI. Let’s look at how we can model the response as well. All we need to do is use the same base model from Pydantic for your response.
"""

...
# Specify the response type will be a list of Item
@app.get("/items", response_model=list[Item])
def list_item(limit: int = 10):
...
# Specify the response type will be an Item model
@app.get("/items/{item_id}", response_model=Item)
def get_item(item_id: int) -> Item: