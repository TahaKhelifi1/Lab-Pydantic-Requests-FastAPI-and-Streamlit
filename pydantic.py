# -*- coding: utf-8 -*-
"""Pydantic

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T8P84DBmH9Iv-Z3dfd2HSdbXbJU4gIwa
"""



"""### Installation of the extand library of Pydantic"""

pip install pydantic

"""### Create a pydatinc model"""

from pydantic import BaseModel
class User(BaseModel):
  name:str
  email:str
  accout_id:int

"""# We can create an instance of the model:"""

user = User(
    name="Taha",
    email="khelifitaha17@gmail.com",
    accout_id=12345
)

"""## Another way to create an instance of the model by unpacking a dictionary"""

user_data = {
    'name':'Taha',
    'email':'khelifitaha17@gmail.com',
    'accout_id':12345
}
user = User(**user_data)

"""### Testing"""

print(user.name)
print(user.email)
print(user.accout_id)

"""### Validating Data with Pydantic"""

from pydantic import BaseModel

class User(BaseModel):
  name:str
  email:str
  accout_id:int
user = User(name = 'Ali', email = 'ali@gmailcom', account_id = 'hello')
print(user)
#if user create an account_id with type not an integer it will show error

"""Solution"""

from pydantic import BaseModel
class User(BaseModel):
  name:str
  email:str
  accout_id:int
user = User(name = 'Taha', email = 'khelifitaha17@gmail.com', accout_id = 12345)
print(user)

"""With importing EmailStr how it will be"""

from pydantic import BaseModel, EmailStr

class User(BaseModel):
    name: str
    email: EmailStr
    account_id: int

user = User(name = 'Taha', email = 'tahakheif@gmail.com', account_id = 1234)
print(user)

"""### Custom Field Validation"""

@validator("accout_id")
def validate_account_id(cls,value):
  if value <=0:
      raise ValueError(f"accout_id must be positive: {value}")
  return value

"""Solution"""

from pydantic import BaseModel, validator

class User(BaseModel):
  name:str
  email:str
  accout_id:int

  @validator("accout_id")
  def validate_account_id(cls,value):
    if value <=0:
        raise ValueError(f"accout_id must be positive: {value}")
    return value

user = User(name = 'Taha', email = 'khelifitaha17@gmail.com', accout_id = 12345)
print(user)

"""### JSON Serialization"""

user_json_str = user.json()
print(user_json_str)

"""# instead of JSON we just want a plain Python dictionary object




"""

user_json_obj=user.dict()

"""**using parse_raw()**"""

json_str={"name":"Taha","email":"khelifitaha17@gmail.com","accout_id":12345}
user = user.parse_raw(json_str)

"""Correction of the code  """

from pydantic import BaseModel, validator

class User(BaseModel):
  name:str
  email:str
  accout_id:int

  @validator("accout_id")
  def validate_account_id(cls,value):
    if value <=0:
        raise ValueError(f"accout_id must be positive: {value}")
    return value

# Define 'user' before using it
user = User(name = 'Taha', email = 'khelifitaha17@gmail.com', accout_id = 12345)

json_str={"name":"Taha","email":"khelifitaha17@gmail.com","accout_id":12345}
# Now 'user' is defined and can be used
user = user.parse_raw(json_str);

"""### Pydantic vs Dataclasses"""

# Python 3.6+
x: int = 0
y: str = "hello"

"""Create a class with fields"""

from dataclasses import dataclass

@dataclass
class User:
    name: str
    email: str
    account_id: int